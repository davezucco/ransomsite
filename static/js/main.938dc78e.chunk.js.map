{"version":3,"sources":["logo.svg","firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cardNumber","cardExp","cardCVC","saveCard","bind","assertThisInitialized","handleCardNumberChange","handleCardExpiryChange","handleCardCVCChange","db","database","ref","card","number","exp","cvc","push","event","setState","target","value","react_default","a","createElement","className","lib_default","cardNumberInputProps","onChange","cardExpiryInputProps","cardCVCInputProps","fieldClassName","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0OCiBxCC,IAASC,cARM,CACXC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,gBAGRP,QAAf,EC2CeQ,cArDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAY,GACZC,QAAS,GACTC,QAAS,IAEXV,EAAKW,SAAWX,EAAKW,SAASC,KAAdX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAChBA,EAAKc,uBAAyBd,EAAKc,uBAAuBF,KAA5BX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAC9BA,EAAKe,uBAAyBf,EAAKe,uBAAuBH,KAA5BX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAC9BA,EAAKgB,oBAAsBhB,EAAKgB,oBAAoBJ,KAAzBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAVVA,0EAcjB,IAAMiB,EAAK3B,EAAS4B,WAAWC,IAAI,SAC7BC,EAAO,CACXC,OAAQlB,KAAKI,MAAMC,WACnBc,IAAKnB,KAAKI,MAAME,QAChBc,IAAKpB,KAAKI,MAAMG,SAElBO,EAAGO,KAAKJ,kDAGaK,GACrBtB,KAAKuB,SAAS,CAAClB,WAAYiB,EAAME,OAAOC,uDAGnBH,GACrBtB,KAAKuB,SAAS,CAACjB,QAASgB,EAAME,OAAOC,oDAGnBH,GAClBtB,KAAKuB,SAAS,CAAChB,QAASe,EAAME,OAAOC,yCAIrC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,qBAAsB,CAAEC,SAAUhC,KAAKW,wBACvCsB,qBAAsB,CAAED,SAAUhC,KAAKY,wBACvCsB,kBAAmB,CAAEF,SAAUhC,KAAKa,qBACpCsB,eAAe,UAEjBT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASO,QAASpC,KAAKQ,UAAzC,0BAjDU6B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.938dc78e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase'\n/*var config = {\n    apiKey: \"AIzaSyDt70VA-Dnwi31Dz9-UedVPB-QBhdLjwjo\",\n    authDomain: \"fakesite-223a4.firebaseapp.com\",\n    databaseURL: \"https://fakesite-223a4.firebaseio.com\",\n    projectId: \"fakesite-223a4\",\n    storageBucket: \"fakesite-223a4.appspot.com\",\n    messagingSenderId: \"690833786064\"\n};*/\nconst config = {\n    apiKey: \"AIzaSyD-4ZVt_gdDETjRamU6xlwQ_d5rQmEQ4EE\",\n    authDomain: \"fake-website.firebaseapp.com\",\n    databaseURL: \"https://fake-website.firebaseio.com\",\n    projectId: \"fake-website\",\n    storageBucket: \"fake-website.appspot.com\",\n    messagingSenderId: \"47740335656\"\n };\nfirebase.initializeApp(config);\nexport default firebase;\n","import React, { Component } from 'react';\nimport CreditCardInput from 'react-credit-card-input';\nimport logo from './logo.svg';\nimport './App.css';\nimport firebase from './firebase.js';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      cardNumber: \"\",\n      cardExp: \"\",\n      cardCVC: \"\"\n    }\n    this.saveCard = this.saveCard.bind(this);\n    this.handleCardNumberChange = this.handleCardNumberChange.bind(this);\n    this.handleCardExpiryChange = this.handleCardExpiryChange.bind(this);\n    this.handleCardCVCChange = this.handleCardCVCChange.bind(this);\n  }\n\n  saveCard() {\n    const db = firebase.database().ref(\"cards\");\n    const card = {\n      number: this.state.cardNumber,\n      exp: this.state.cardExp,\n      cvc: this.state.cardCVC\n    }\n    db.push(card);\n  }\n\n  handleCardNumberChange(event) {\n    this.setState({cardNumber: event.target.value});\n  }\n\n  handleCardExpiryChange(event) {\n    this.setState({cardExp: event.target.value});\n  }\n\n  handleCardCVCChange(event) {\n    this.setState({cardCVC: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p>Please pay us</p>\n        <CreditCardInput\n          cardNumberInputProps={{ onChange: this.handleCardNumberChange }}\n          cardExpiryInputProps={{ onChange: this.handleCardExpiryChange }}\n          cardCVCInputProps={{ onChange: this.handleCardCVCChange }}\n          fieldClassName=\"input\"\n        />\n        <br/>\n        <br/>\n        <button className=\"Button\" onClick={this.saveCard}>Submit Payment</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}